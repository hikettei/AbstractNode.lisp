
(cl:in-package :cl-user)

;; [TODO] SLEEF (Loop Collapse and ...), Vectorized Math
;; [TODO] Doing an indentation

(defpackage :abstractnode.gcc-backend
  (:use :cl :AbstractNode.graph :AbstractNode.compiler))

(in-package :abstractnode.gcc-backend)

;; Quote from: The Common Lisp Cookbook - Strings
(defun replace-all (string part replacement &key (test #'char=))
  "Returns a new string in which all the occurences of the part 
is replaced with replacement."
  (with-output-to-string (out)
    (loop with part-length = (length part)
          for old-pos = 0 then (+ pos part-length)
          for pos = (search part string
                            :start2 old-pos
                            :test test)
          do (write-string string out
                           :start old-pos
                           :end (or pos (length string)))
          when pos do (write-string replacement out)
            while pos)))

(defun merge-with (list key)
  (butlast
   (loop for l in list
	 append
	 `(,(format nil "~a" l) ,key))))

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;;  From AbstractNode.lisp to C Compiler
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(defmethod compile-requirements ((backend-indicator (eql :gcc)))
  "
// Authmatically generated by AbstractNode.lisp
// DO NOT MODIFY THIS!
#include <sleef.h>
#include <omp.h>
")

(defmethod compile-endline ((backend-indicator (eql :gcc))) ";")

(defmethod compile-aref ((backend-indicator (eql :gcc)) tensor index)
  (format nil "~a[~a]" (tensor-memory-id tensor) index))

(defmethod compile-symbol ((backend-indicator (eql :gcc)) symbol)
  (replace-all (format nil "~a" symbol) "-" "_"))

(defmethod compile-dtype ((backend-indicator (eql :gcc)) dtype pointer-p)
  (symbol-macrolet ((dtype-helper 
		      (ecase dtype
			(:uint32
			 "uint32_t")
			(:double
			 "double")
			(:float
			 "float"))))
    (if pointer-p
	(format nil "~a *" dtype-helper)
	dtype-helper)))

(defmethod compile-iteration ((backend-indicator (eql :gcc))
			      index
			      from
			      to
			      by
			      body)
  (format nil "for (uint32_t ~a = ~a; ~a <= ~a; ~a++~a) { ~%~a~% }"
	  index
	  from
	  index
	  to
	  index
	  by
	  body))

(defmethod compile-function ((backend-indicator (eql :gcc))
			     name
			     vars
			     dynamic-shapes
			     body)
  (when (null body) (return-from compile-function ""))
  (with-output-to-string (out)
    ;; void NAME(args) { }
    (format out "void ~a(~a)"
	    name
	    (apply
	     #'concatenate
	     'string
	     (merge-with
	      `(,@(loop for v in vars
			collect
			(format
			 nil
			 "~a ~a"
			 (compile-dtype
			  backend-indicator
			  (tensor-dtype v)
			  (not (tensor-scalar-p v)))
			 (compile-symbol
			  backend-indicator
			  (tensor-memory-id v))))
		,@(loop for symbol in dynamic-shapes
			collect
			(format
			 nil
			 "uint32_t ~a"
			 (compile-symbol
			  backend-indicator
			  symbol))))
	      ",")))
    (when body
      (format out "{~%~a~%}"body))))

(macrolet ((def (op gcc-op)
	     `(defmethod compile-instruction
		  ((backend-indicator (eql :gcc))
		   (op                (eql ,op))
		   &rest args)
		(flet ((binary-ops (a b)
			 (format nil "~a ~a ~a" a ,gcc-op b)))
		  (reduce #'binary-ops args)))))
  (def :+ "+")
  (def :- "-")
  (def :* "*")
  (def :/ "/")
  (def := "="))

(print
 (time
  (compile-with-backend
   :gcc
   (abop:lazy-add
    (abop:lazy-mul
     (make-tensor `(5 4 3) :float :input-p t)
     (make-tensor `(5 4 3) :float))
    (make-tensor `(5 4 3) :float)))))

